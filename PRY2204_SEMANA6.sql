/* --- ADMIN SEMANA 6 --- */
/* --- CASO 1 --- */
BEGIN EXECUTE IMMEDIATE 'DROP TABLE dosis PURGE';          EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE pago PURGE';           EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE receta PURGE';         EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE paciente PURGE';       EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE medico PURGE';         EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE digitador PURGE';      EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE medicamento PURGE';    EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE diagnostico PURGE';    EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE banco PURGE';          EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE tipo_receta PURGE';    EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE tipo_medicamento PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE via_administracion PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE especialidad PURGE';   EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE comuna PURGE';         EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE region PURGE';         EXCEPTION WHEN OTHERS THEN NULL; END; 
/
/*GEOGRAFICO*/
CREATE TABLE region (
  id_region      NUMBER(2)      PRIMARY KEY,
  nombre         VARCHAR2(50)   NOT NULL
);

CREATE TABLE comuna (
  id_comuna      NUMBER(4)
    GENERATED BY DEFAULT AS IDENTITY (START WITH 1101 INCREMENT BY 1)
    PRIMARY KEY,
  nombre         VARCHAR2(60)   NOT NULL,
  id_region      NUMBER(2)      NOT NULL,
  CONSTRAINT fk_comuna_region
    FOREIGN KEY (id_region) REFERENCES region(id_region)
);

/*DOMINIO*/
CREATE TABLE especialidad (
  id_especialidad NUMBER(6)
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  nombre          VARCHAR2(60) NOT NULL
);

CREATE TABLE tipo_receta (
  id_tipo_receta  NUMBER(3)    PRIMARY KEY,
  nombre          VARCHAR2(30) NOT NULL
);

CREATE TABLE tipo_medicamento (
  id_tipo_medicamento NUMBER(3) PRIMARY KEY,
  nombre              VARCHAR2(30) NOT NULL   
);

CREATE TABLE via_administracion (
  id_via         NUMBER(3)    PRIMARY KEY,
  nombre         VARCHAR2(30) NOT NULL       
);

/*PERSONAS*/
CREATE TABLE paciente (
  rut_pac        VARCHAR2(12)  PRIMARY KEY,        
  dv_pac         CHAR(1)       NOT NULL,
  pnombre        VARCHAR2(25)  NOT NULL,
  snombre        VARCHAR2(25),
  papellido      VARCHAR2(25)  NOT NULL,
  sapellido      VARCHAR2(25),
  fecha_nac      DATE,
  telefono       VARCHAR2(20),
  calle          VARCHAR2(60),
  numero         VARCHAR2(10),
  ciudad         VARCHAR2(40)  NOT NULL,
  id_comuna      NUMBER(4)     NOT NULL,
  CONSTRAINT ck_paciente_dv
    CHECK (dv_pac IN ('0','1','2','3','4','5','6','7','8','9','K')),
  CONSTRAINT fk_paciente_comuna
    FOREIGN KEY (id_comuna) REFERENCES comuna(id_comuna)
);

CREATE TABLE medico (
  rut_med        VARCHAR2(12)  PRIMARY KEY,
  dv_med         CHAR(1)       NOT NULL,
  pnombre        VARCHAR2(25)  NOT NULL,
  snombre        VARCHAR2(25),
  papellido      VARCHAR2(25)  NOT NULL,
  sapellido      VARCHAR2(25),
  telefono       VARCHAR2(20)  NOT NULL,
  id_especialidad NUMBER(6)    NOT NULL,
  CONSTRAINT ck_medico_dv
    CHECK (dv_med IN ('0','1','2','3','4','5','6','7','8','9','K')),
  CONSTRAINT uq_medico_telefono UNIQUE (telefono),
  CONSTRAINT fk_medico_especialidad
    FOREIGN KEY (id_especialidad) REFERENCES especialidad(id_especialidad)
);

CREATE TABLE digitador (
  id_digitador   NUMBER(6)     PRIMARY KEY,
  dv_dig         CHAR(1)       NOT NULL,
  pnombre        VARCHAR2(25)  NOT NULL,
  papellido      VARCHAR2(25)  NOT NULL,
  CONSTRAINT ck_digitador_dv
    CHECK (dv_dig IN ('0','1','2','3','4','5','6','7','8','9','K'))
);

/*CLINICO*/
CREATE TABLE diagnostico (
  cod_diagnostico NUMBER(6)    PRIMARY KEY,
  nombre          VARCHAR2(60) NOT NULL
);

CREATE TABLE medicamento (
  cod_medicamento   NUMBER(10)    PRIMARY KEY,
  nombre            VARCHAR2(60)  NOT NULL,
  id_tipo_medicamento NUMBER(3)   NOT NULL,
  id_via            NUMBER(3)     NOT NULL,
  dosis_recomendada VARCHAR2(40)  NOT NULL,  
  stock_disponible  NUMBER(8)     DEFAULT 0  NOT NULL,
  CONSTRAINT fk_med_tipo
    FOREIGN KEY (id_tipo_medicamento) REFERENCES tipo_medicamento(id_tipo_medicamento),
  CONSTRAINT fk_med_via
    FOREIGN KEY (id_via) REFERENCES via_administracion(id_via),
  CONSTRAINT ck_med_stock CHECK (stock_disponible >= 0)
);

CREATE TABLE banco (
  cod_banco     NUMBER(4)     PRIMARY KEY,
  nombre        VARCHAR2(40)  NOT NULL
);

/*RECETAS Y DOSIS*/
CREATE TABLE receta (
  cod_receta       NUMBER(10)   PRIMARY KEY,          
  observaciones    VARCHAR2(500),
  fecha_emision    DATE          NOT NULL,
  fecha_vencimiento DATE,
  rut_pac          VARCHAR2(12)  NOT NULL,
  rut_med          VARCHAR2(12)  NOT NULL,
  id_digitador     NUMBER(6)     NOT NULL,
  cod_diagnostico  NUMBER(6)     NOT NULL,            
  id_tipo_receta   NUMBER(3)     NOT NULL,
  CONSTRAINT fk_receta_pac  FOREIGN KEY (rut_pac) REFERENCES paciente(rut_pac),
  CONSTRAINT fk_receta_med  FOREIGN KEY (rut_med) REFERENCES medico(rut_med),
  CONSTRAINT fk_receta_dig  FOREIGN KEY (id_digitador) REFERENCES digitador(id_digitador),
  CONSTRAINT fk_receta_diag FOREIGN KEY (cod_diagnostico) REFERENCES diagnostico(cod_diagnostico),
  CONSTRAINT fk_receta_tipo FOREIGN KEY (id_tipo_receta) REFERENCES tipo_receta(id_tipo_receta),
  CONSTRAINT ck_receta_fechas CHECK (fecha_vencimiento IS NULL OR fecha_vencimiento >= fecha_emision)
);

CREATE TABLE dosis (
  cod_receta        NUMBER(10)   NOT NULL,
  cod_medicamento   NUMBER(10)   NOT NULL,
  unidades          NUMBER(6)    DEFAULT 1 NOT NULL,  
  dosis             VARCHAR2(40) NOT NULL,            
  frecuencia        VARCHAR2(40) NOT NULL,             
  dias_tratamiento  NUMBER(4)    NOT NULL,
  CONSTRAINT pk_dosis PRIMARY KEY (cod_receta, cod_medicamento),
  CONSTRAINT fk_dosis_receta FOREIGN KEY (cod_receta) REFERENCES receta(cod_receta),
  CONSTRAINT fk_dosis_medic  FOREIGN KEY (cod_medicamento) REFERENCES medicamento(cod_medicamento),
  CONSTRAINT ck_dosis_unid CHECK (unidades >= 0),
  CONSTRAINT ck_dosis_dias CHECK (dias_tratamiento >= 1)
);

CREATE TABLE pago (
  cod_boleta    NUMBER(12)   PRIMARY KEY,
  cod_receta    NUMBER(10)   NOT NULL,
  fecha_pago    DATE         NOT NULL,
  monto_total   NUMBER(12,2) NOT NULL,
  metodo_pago   VARCHAR2(25) NOT NULL,      
  cod_banco     NUMBER(4),                   
  CONSTRAINT fk_pago_receta  FOREIGN KEY (cod_receta) REFERENCES receta(cod_receta),
  CONSTRAINT fk_pago_banco   FOREIGN KEY (cod_banco)  REFERENCES banco(cod_banco),
  CONSTRAINT ck_pago_monto   CHECK (monto_total >= 0)
);

/* --- CASO 2 --- */
ALTER TABLE medicamento
  ADD (precio_unitario NUMBER(10,2) DEFAULT 1000 NOT NULL);

ALTER TABLE medicamento
  ADD CONSTRAINT ck_medicamento_precio
  CHECK (precio_unitario BETWEEN 1000 AND 2000000);
  
ALTER TABLE pago
  ADD CONSTRAINT ck_pago_metodo
  CHECK (UPPER(metodo_pago) IN ('EFECTIVO','TARJETA','TRANSFERENCIA'));
  
  DECLARE v_exists NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_exists
  FROM user_tab_columns
  WHERE table_name='PACIENTE' AND column_name='EDAD';
  IF v_exists=1 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE paciente DROP COLUMN edad';
  END IF;
END;
/

DECLARE v_exists NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_exists
  FROM user_tab_columns
  WHERE table_name='PACIENTE' AND column_name='FECHA_NAC';
  IF v_exists=0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE paciente ADD (fecha_nac DATE)';
  END IF;
END;
/
