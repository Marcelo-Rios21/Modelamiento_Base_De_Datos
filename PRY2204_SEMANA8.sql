-- CASO 1

-- CATALOGOS BASICOS
CREATE TABLE AFP (
  id_afp     NUMBER(5) GENERATED BY DEFAULT AS IDENTITY
               (START WITH 210 INCREMENT BY 6) NOT NULL,
  nom_afp    VARCHAR2(255) NOT NULL,
  CONSTRAINT AFP_PK PRIMARY KEY (id_afp)
);

CREATE TABLE SALUD (
  id_salud   NUMBER(4)    NOT NULL,
  nom_salud  VARCHAR2(40) NOT NULL,
  CONSTRAINT SALUD_PK PRIMARY KEY (id_salud)
);

CREATE TABLE MEDIO_PAGO (
  id_mpago       NUMBER(3)    NOT NULL,
  nombre_mpago   VARCHAR2(50) NOT NULL,
  CONSTRAINT MEDIO_PAGO_PK PRIMARY KEY (id_mpago)
);

CREATE TABLE MARCA (
  id_marca      NUMBER(3)     NOT NULL,
  nombre_marca  VARCHAR2(25)  NOT NULL,
  CONSTRAINT MARCA_PK PRIMARY KEY (id_marca),
  CONSTRAINT MARCA_UN_NOMBRE UNIQUE (nombre_marca)
);

CREATE TABLE CATEGORIA (
  id_categoria      NUMBER(3)      NOT NULL,
  nombre_categoria  VARCHAR2(255)  NOT NULL,
  CONSTRAINT CATEGORIA_PK PRIMARY KEY (id_categoria),
  CONSTRAINT CATEGORIA_UN_NOMBRE UNIQUE (nombre_categoria)
);

-- REGION Y COMUNA
CREATE TABLE REGION (
  id_region  NUMBER(4)     NOT NULL,
  nom_region VARCHAR2(255) NOT NULL,
  CONSTRAINT REGION_PK PRIMARY KEY (id_region)
);

CREATE TABLE COMUNA (
  id_comuna  NUMBER(4)     NOT NULL,
  nom_comuna VARCHAR2(100) NOT NULL,
  cod_region NUMBER(4)     NOT NULL,
  CONSTRAINT COMUNA_PK PRIMARY KEY (id_comuna),
  CONSTRAINT COMUNA_FK_REGION
    FOREIGN KEY (cod_region) REFERENCES REGION(id_region)
);

-- PROVEEDOR
CREATE TABLE PROVEEDOR (
  id_proveedor    NUMBER(5)     NOT NULL,
  nombre_proveedor VARCHAR2(150) NOT NULL,
  rut_proveedor   VARCHAR2(12)  NOT NULL,        -- admite guion
  telefono        VARCHAR2(10),
  email           VARCHAR2(200),
  direccion       VARCHAR2(200),
  cod_comuna      NUMBER(4)     NOT NULL,
  CONSTRAINT PROVEEDOR_PK PRIMARY KEY (id_proveedor),
  CONSTRAINT PROVEEDOR_UN_RUT UNIQUE (rut_proveedor),
  CONSTRAINT PROVEEDOR_FK_COMUNA
    FOREIGN KEY (cod_comuna) REFERENCES COMUNA(id_comuna)
);

-- EMPLEADO
CREATE TABLE EMPLEADO (
  id_empleado       NUMBER(4)     NOT NULL,
  rut_empleado      VARCHAR2(12)  NOT NULL,      -- admite guion
  nombre_empleado   VARCHAR2(25)  NOT NULL,
  apellido_paterno  VARCHAR2(25)  NOT NULL,
  apellido_materno  VARCHAR2(25),
  fecha_contratacion DATE,
  sueldo_base       NUMBER(10),
  bono_jefatura     NUMBER(10),
  activo            CHAR(1)       DEFAULT 'S' NOT NULL,
  tipo_empleado     VARCHAR2(20),
  cod_afp           NUMBER(5),                  -- match con AFP(id_afp)
  cod_salud         NUMBER(4),
  CONSTRAINT EMPLEADO_PK PRIMARY KEY (id_empleado),
  CONSTRAINT EMPLEADO_UN_RUT UNIQUE (rut_empleado),
  CONSTRAINT EMPLEADO_CK_ACTIVO CHECK (activo IN ('S','N')),
  CONSTRAINT EMPLEADO_FK_AFP
    FOREIGN KEY (cod_afp) REFERENCES AFP(id_afp),
  CONSTRAINT EMPLEADO_FK_SALUD
    FOREIGN KEY (cod_salud) REFERENCES SALUD(id_salud)
);

CREATE TABLE ADMINISTRATIVO (
  id_empleado NUMBER(4) NOT NULL,
  CONSTRAINT ADMINISTRATIVO_PK PRIMARY KEY (id_empleado),
  CONSTRAINT ADMIN_FK_EMPLEADO
    FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado)
);

CREATE TABLE VENDEDOR (
  id_empleado    NUMBER(4)   NOT NULL,
  comision_venta NUMBER(5,2) NOT NULL,
  CONSTRAINT VENDEDOR_PK PRIMARY KEY (id_empleado),
  CONSTRAINT VENDEDOR_FK_EMPLEADO
    FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado),
  CONSTRAINT VENDEDOR_CK_COMISION CHECK (comision_venta >= 0)
);

-- PRODUCTO
CREATE TABLE PRODUCTO (
  id_producto     NUMBER(4)     NOT NULL,
  nombre_producto VARCHAR2(100) NOT NULL,
  precio_unitario NUMBER,
  origen_nacional CHAR(1)       DEFAULT 'S' NOT NULL,
  stock_minimo    NUMBER(3)     DEFAULT 0   NOT NULL,
  activo          CHAR(1)       DEFAULT 'S' NOT NULL,
  cod_marca       NUMBER(3)     NOT NULL,
  cod_categoria   NUMBER(3)     NOT NULL,
  cod_proveedor   NUMBER(5)     NOT NULL,
  CONSTRAINT PRODUCTO_PK PRIMARY KEY (id_producto),
  CONSTRAINT PRODUCTO_CK_ACTIVO CHECK (activo IN ('S','N')),
  CONSTRAINT PRODUCTO_CK_ORIGEN CHECK (origen_nacional IN ('S','N')),
  CONSTRAINT PRODUCTO_FK_MARCA
    FOREIGN KEY (cod_marca)     REFERENCES MARCA(id_marca),
  CONSTRAINT PRODUCTO_FK_CATEGORIA
    FOREIGN KEY (cod_categoria) REFERENCES CATEGORIA(id_categoria),
  CONSTRAINT PRODUCTO_FK_PROVEEDOR
    FOREIGN KEY (cod_proveedor) REFERENCES PROVEEDOR(id_proveedor)
);

-- VENTA
CREATE TABLE VENTA (
  id_venta     NUMBER(4) GENERATED BY DEFAULT AS IDENTITY
                 (START WITH 5050 INCREMENT BY 3) NOT NULL,
  fecha_venta  DATE         NOT NULL,
  total_venta  NUMBER(10)   NOT NULL,
  cod_mpag     NUMBER(3)    NOT NULL,
  cod_empleado NUMBER(4)    NOT NULL,
  CONSTRAINT VENTA_PK PRIMARY KEY (id_venta),
  CONSTRAINT VENTA_FK_MEDIO_PAGO
    FOREIGN KEY (cod_mpag) REFERENCES MEDIO_PAGO(id_mpago),
  CONSTRAINT VENTA_FK_EMPLEADO
    FOREIGN KEY (cod_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
  cod_venta    NUMBER(4) NOT NULL,
  cod_producto NUMBER(4) NOT NULL,
  cantidad     NUMBER(6) NOT NULL,
  CONSTRAINT DETALLE_VENTA_PK PRIMARY KEY (cod_venta, cod_producto),
  CONSTRAINT DET_VENTA_FK_VENTA
    FOREIGN KEY (cod_venta)    REFERENCES VENTA(id_venta),
  CONSTRAINT DET_VENTA_FK_PRODUCTO
    FOREIGN KEY (cod_producto) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT DETALLE_VENTA_CK_CANT CHECK (cantidad > 0)
);


-- CASO 2

-- SUELDO BASE MIN
ALTER TABLE EMPLEADO
  ADD CONSTRAINT EMPLEADO_CK_SUELDO_MIN
  CHECK (sueldo_base >= 400000);

-- COMISION ENTRE 0 Y 0.25
ALTER TABLE VENDEDOR
  DROP CONSTRAINT VENDEDOR_CK_COMISION;

ALTER TABLE VENDEDOR
  ADD CONSTRAINT VENDEDOR_CK_COMISION_RANGO
  CHECK (comision_venta BETWEEN 0 AND 0.25);

-- STOCK MIN
ALTER TABLE PRODUCTO
  ADD CONSTRAINT PRODUCTO_CK_STOCK_MIN_3
  CHECK (stock_minimo >= 3);
  
-- EMAIL UNICO
ALTER TABLE PROVEEDOR
  ADD CONSTRAINT PROVEEDOR_UN_EMAIL
  UNIQUE (email);


-- CASO 3
-- secuencias
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_SALUD';     EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_EMPLEADO';  EXCEPTION WHEN OTHERS THEN NULL; END;
/
CREATE SEQUENCE SEQ_SALUD    START WITH 2050 INCREMENT BY 10 NOCACHE;
CREATE SEQUENCE SEQ_EMPLEADO START WITH 750  INCREMENT BY 3  NOCACHE;

-- Catálogos base
INSERT INTO AFP (nom_afp) VALUES ('AFP Habitat');
INSERT INTO AFP (nom_afp) VALUES ('AFP Cuprum');
INSERT INTO AFP (nom_afp) VALUES ('AFP Provida');
INSERT INTO AFP (nom_afp) VALUES ('AFP Planvital');

INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (11, 'Efectivo');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (12, 'Tarjeta Débito');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (13, 'Tarjeta Crédito');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (14, 'Cheque');

-- SALUD 
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Fonasa');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Colmena');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Banmédica');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Cruz Blanca');

-- REGION
INSERT INTO REGION (id_region, nom_region) VALUES (1, 'Región Metropolitana');
INSERT INTO REGION (id_region, nom_region) VALUES (2, 'Valparaíso');
INSERT INTO REGION (id_region, nom_region) VALUES (3, 'Biobío');
INSERT INTO REGION (id_region, nom_region) VALUES (4, 'Los Lagos');

DECLARE
-- AFP IDs
  v_afp_habitat      AFP.id_afp%TYPE;
  v_afp_cuprum       AFP.id_afp%TYPE;
  v_afp_provida      AFP.id_afp%TYPE;
  v_afp_planvital    AFP.id_afp%TYPE;

  -- SALUD IDs 
  v_sal_min          NUMBER;   -- 2050
  v_sal_fonasa       NUMBER;   -- v_sal_min + 0
  v_sal_colmena      NUMBER;   -- v_sal_min + 10
  v_sal_banmedica    NUMBER;   -- v_sal_min + 20
  v_sal_cruzblanca   NUMBER;   -- v_sal_min + 30

  -- IDs de empleados
  v_emp_marcela  EMPLEADO.id_empleado%TYPE;
  v_emp_jose     EMPLEADO.id_empleado%TYPE;
  v_emp_veronica EMPLEADO.id_empleado%TYPE;
  v_emp_luis     EMPLEADO.id_empleado%TYPE;
  v_emp_claudia  EMPLEADO.id_empleado%TYPE;
  v_emp_carlos   EMPLEADO.id_empleado%TYPE;
  v_emp_javiera  EMPLEADO.id_empleado%TYPE;
  v_emp_diego    EMPLEADO.id_empleado%TYPE;
  v_emp_fernanda EMPLEADO.id_empleado%TYPE;
  v_emp_tomas    EMPLEADO.id_empleado%TYPE;
BEGIN
-- AFP
  SELECT id_afp INTO v_afp_habitat   FROM AFP WHERE nom_afp='AFP Habitat';
  SELECT id_afp INTO v_afp_cuprum    FROM AFP WHERE nom_afp='AFP Cuprum';
  SELECT id_afp INTO v_afp_provida   FROM AFP WHERE nom_afp='AFP Provida';
  SELECT id_afp INTO v_afp_planvital FROM AFP WHERE nom_afp='AFP Planvital';

-- SALUD 
  SELECT MIN(id_salud) INTO v_sal_min FROM SALUD;
  v_sal_fonasa     := v_sal_min + 0;
  v_sal_colmena    := v_sal_min + 10;
  v_sal_banmedica  := v_sal_min + 20;
  v_sal_cruzblanca := v_sal_min + 30;

  v_emp_marcela := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_marcela,'11111111-1','Marcela','González','Pérez',
   DATE '2022-03-15',950000,80000,'S','Administrativo', v_afp_habitat,  v_sal_fonasa);

  v_emp_jose := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_jose,'22222222-2','José','Muñoz','Ramírez',
   DATE '2021-07-10',980000,75000,'S','Administrativo', v_afp_cuprum,   v_sal_colmena);

  v_emp_veronica := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_veronica,'33333333-3','Verónica','Soto','Alarcón',
   DATE '2020-01-05',880000,70000,'S','Vendedor',        v_afp_planvital, v_sal_colmena);

  v_emp_luis := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_luis,'44444444-4','Luis','Reyes','Fuentes',
   DATE '2023-04-01',560000,NULL,'S','Vendedor',         v_afp_provida,   v_sal_fonasa);

  v_emp_claudia := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_claudia,'55555555-5','Claudia','Fernández','Lagos',
   DATE '2023-04-15',600000,NULL,'S','Vendedor',         v_afp_cuprum,    v_sal_banmedica);

  v_emp_carlos := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_carlos,'66666666-6','Carlos','Navarro','Vega',
   DATE '2023-05-01',610000,NULL,'S','Administrativo',   v_afp_habitat,   v_sal_colmena);

  v_emp_javiera := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_javiera,'77777777-7','Javiera','Pino','Rojas',
   DATE '2023-05-10',650000,NULL,'S','Administrativo',   v_afp_habitat,   v_sal_fonasa);

  v_emp_diego := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_diego,'88888888-8','Diego','Mella','Contreras',
   DATE '2023-12-25',620000,NULL,'S','Vendedor',         v_afp_cuprum,    v_sal_colmena);

  v_emp_fernanda := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_fernanda,'99999999-9','Fernanda','Salas','Herrera',
   DATE '2023-05-18',570000,NULL,'S','Vendedor',         v_afp_provida,   v_sal_banmedica);

  v_emp_tomas := SEQ_EMPLEADO.NEXTVAL;
  INSERT INTO EMPLEADO
  (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
   fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_afp, cod_salud)
  VALUES
  (v_emp_tomas,'10101010-0','Tomás','Vidal','Espinoza',
   DATE '2023-06-01',530000,NULL,'S','Vendedor',         v_afp_planvital, v_sal_fonasa);

-- VENDEDOR (comisiones dentro del rango 0–0.25)
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_veronica, 0.08);
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_luis,     0.07);
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_claudia,  0.06);
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_diego,    0.06);
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_fernanda, 0.05);
  INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (v_emp_tomas,    0.09);

-- VENTA 
  INSERT INTO VENTA (fecha_venta, total_venta, cod_mpag, cod_empleado)
  VALUES (DATE '2023-05-12', 225990, 12, v_emp_fernanda);

  INSERT INTO VENTA (fecha_venta, total_venta, cod_mpag, cod_empleado)
  VALUES (DATE '2023-10-23', 524990, 13, v_emp_diego);

  INSERT INTO VENTA (fecha_venta, total_venta, cod_mpag, cod_empleado)
  VALUES (DATE '2023-02-17', 466990, 11, v_emp_luis);
END;
/

-- CASO 4
-- INFORME 1
SELECT
  e.id_empleado                                   AS "IDENTIFICADOR",
  e.nombre_empleado || ' ' ||
  e.apellido_paterno || ' ' ||
  e.apellido_materno                              AS "NOMBRE COMPLETO",
  e.sueldo_base                                   AS "SALARIO",
  e.bono_jefatura                                 AS "BONIFICACION",
  (e.sueldo_base + e.bono_jefatura)               AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.activo = 'S'
  AND e.bono_jefatura IS NOT NULL
ORDER BY
  (e.sueldo_base + e.bono_jefatura) DESC,
  e.apellido_paterno DESC;
  
-- INFORME 2
SELECT 
  nombre_empleado || ' ' || apellido_paterno || ' ' || NVL(apellido_materno,'') AS "EMPLEADO",
  sueldo_base AS "SUELDO",
  ROUND(sueldo_base * 0.08,0) AS "POSIBLE AUMENTO",
  ROUND(sueldo_base + (sueldo_base * 0.08),0) AS "SALARIO SIMULADO"
FROM EMPLEADO
WHERE sueldo_base BETWEEN 550000 AND 800000
ORDER BY sueldo_base ASC;


